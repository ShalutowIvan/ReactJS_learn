уроки:
https://www.youtube.com/watch?v=wZ1P3QM9_p8&list=PLiZoB8JBsdznY1XwBcBhHL9L7S_shPGVE&index=4


поставим библиотеку react-router-dom
npm install react-router-dom

далее в базовом файле main.jsx нужно обернуть наше приложение в тег BrowserRouter
также его нужно импортировать из react-router-dom

импортируем в App.jsx из Routes, Route, Link из react-router-dom
Routes - роуты
Route - роут
Link - ссылка!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
ранее был компонент switch
сейчас его нет, вместо него Routes
создадим папку pages
в ней создадим файлы для страниц
и импортируем их в App.jsx
import Homepage from './pages/Homepage'
import Aboutpage from './pages/Aboutpage'
import Blogpage from './pages/Blogpage'
import Notfoundpage from './pages/Notfoundpage'

для роутинга сделаем тег Routes
и дочерними элементами в нем будут компоненты Route
один из дочерних элементов
<Route path="/" element={<Homepage />} />
<Route path="/about" element={<Aboutpage />} />
<Route path="/blog" element={<Blogpage />} />
<Route path="*" element={<Notfoundpage />} />
писать нужно именно так, а не с закрывающим и открывающим тегом

создадим компоненты
сделаем компонент Layout, туда перенесем ссылки Link

и создадим там компонент Outlet !!!!!!!!!!!!!!!!!!!!!!!!!!!!
суть его такая, что мы говорим нашей разметки куда мы хотим вставить все остальное
то что идет после Outlet это то куда мы хотим вставить весь остальной контент
у нас пока только футер, но там будет и все остальное
создаем новый Route в файле App.jsx
В нем будут все наши Route со ссылками
то есть получается тут будет общая обертка, и в ней будут вложенные роуты, их можно динамически менять
причем этот компонент будет предоставлять место куда будет отрисовываться все дочернее содержимое. То есть там где мы написали Outlet и ниже
То есть, мы в файле Layout.jsx написали сначала тег header, потом Outlet, а потом footer, и Outlet это содержимое нашего роута, то есть как было тело между хедером и футером. Вроде понятно
пропишем такую структуру
<Route path="/" element={<Layout />}>
	<Route index element={<Homepage />} />        
	<Route path="posts" element={<Blogpage />} />
	<Route path="about" element={<Aboutpage />} />
	<Route path="*" element={<Notfoundpage />} />
</Route>
тут получается будет Homepage идти в корне по адресу "/", далее добавляться будут ссылки posts about и др
Outlet - это как бы блок в jinja
в него можно всталять блоки кода

Компонент NavLink и его кастомизация в React-Router 6!!!!!!!!!!!!!!!!!!!!!!!!!
это выделенные ссылки
сделаем стиль для выделения ссылки
и сделаем переменную в которой будет переключаться стиль
const setActive = ({isActive}) => isActive ? 'active-link' : '';
и потом в наших линках стиль будем указывать
className={setActive}
по умолчанию в теге уже указан className стиль active, если мы создаим свой то его надо будет прописать как  className
также можно и прописать style
он принимает объект, но можно передать и функцию. 
в NavLink есть встроенный параметр isActive
его можно проверять

сделаем кастомный линк

import { Link, useMatch } from 'react-router-dom'

export default function CustomLink({ children, to, ...props }) {
	const match = useMatch(to);
	console.log({match})


	return (
		
		<Link 
			to={to}
			style={{
				color:match ? 'var(--color-active)' : 'white',
			}}
			{...props}>

			{children}
		</Link>
		)
}

не разобрался как работает useMatch, и кажется что className достаточно будет



Параметры в ссылках в React Router 6!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
параметр пишется примерно так
<Route path="posts/:id" element={<Singlepage />} />
:id это параметр роутера
создадим файл Singlepage.jsx в папке pages
в нем сделаем простой компонент Singlepage
import React from 'react';


export default function Singlepage() {

	return (
		<>
			<p>1</p>

		</>
		)
}

будем использовать хук useParams для использования параметров
можно в ссылке использовать и несколько параметров
и потом в логике приложения параметры можно использовать
то есть в ссылку что-то передали и потом используем как в питоне
обычно используется один параметр, а не 2. Я так и делал в питоне
при использовании useParams() выводятся сразу весь список параметров если их несколько
useParams() - это типа словарь в питоне
можно обращаться useParams().название параметра и выведется значение параметра
либо можно обращаться и так: const {id} = useParams();
и у нас будет переменная с названием id
ее можно применять в коде jsx
в компоненте Blogpage сделаем апи запрос, и там будем выводить id от поста в через компонент Singlepage, он будет автоматом подтягивать ссылку
в файле Singlepage сделали так, чтобы при запросе линка из компонента Blogpage к сайту выводился сам пост
юзнули состояние state и useEffect

при добавлении зависимости в useEffect запрос делается каждый раз

сделаем отдельный роут на котором будем создавать новые страницы
создание страниц!!!!!!!!!!!!!!!!!

сделаем компонент:

export default function Createpost() {
	return (
		<div>
			<h1>Create a post</h1>
		</div>
		)
}


и вызовем его в роуте
<Route path="posts/new" element={<Createpost />} />

получается у нас теперь будет отдельный роут с нужной нам страницей

и можно сделать и любую другую страницу, например редактирования
для редактирования уже нужен параметр
используем useParams
то есть просто выведем нужный нам id от какого либо поста
причем параметр не обязательно должен быть в конце урл, можно его юзать и в середине, функционал не изменится. НО по хорошему нужно юзать какую либо проверку на типы данных, сейчас никаких проверок нет у нас пока. 



Работа с историей, локацией и приватными роутами в React-router 6!!!!!!!!!!!!!!!!!!!!!!!
сделаем кнопку назад. Она должна взаимодействовать с историей браузер, и переходить на страницу назад. 
идем в файл Singlepage.jsx
импортируем хук useNavigate
создадим константу
const navigate = useNavigate();
и ее можно использовать в стрелочной функции
const goBack = () => navigate(-1);
эта функция принимает один параметр ссылку либо цифру. То есть написать ссылку в виде строки (например "/post"), то мы перейдем на ту ссылку, которую мы напишем. Если написать цифру, то будет переход на страницу назад или вперед.
если написать -1, то это как нажать в браузере один раз кнопку назад. Если написать положительную цифру, то будет шаг вперед.

пример ссылки переадресации:
const goHome = () => navigate('/', {replace: true});

{replace: true} означает что мы не идем по истории, а просто редирект делаем.
также можно передать какой либо state и далее через двоеточие контекст, как в питоне передаем, тут также
const goHome = () => navigate('/', {replace: true, state: контекст});
мы сделали переход через navigate на страницу Home, но так лучше не делать. ЛУчше использовать Link, то есть переход по ссылке. То есть на кнопке лучше юзать Link, а если это будет автоматическая переадресация, то так можно делать. 

обычная переадресация!!!!!!!!!!!!
то есть при переходе по какой либо ссылке будет автоматическая переадресация на другую ссылку
для этого используем компонент Navigate, его импортируем вместе с Route из 'react-router-dom'
и пропишем еще один роут:
<Route path="about-us" element={<Navigate to="/about" replace />} />
и передаем булевое значение replace, и тогда в истории браузера не будет сохраняться этот переход по ссылке
при переходе по ссылке /about-us автоматом перейдем на ссылку /about

объект location!!!!!!!!!!!!
виндоус location лучше не юзать, а нужно юзать хук useLocation
импортируем его из 'react-router-dom'
и выведем в консоль useLocation
там будет такой словарик:

hash: ""
key: "ri5db4cr" это уникальный ключ этой страницы
pathname: "/posts" полный путь страницы его можно юзать в других запросах
search: "" это какие либо доп параметры, например id
state: null это контекст как в питоне любая инфа которую можно передать

для примера сделал такой navigate:
const goTest = () => navigate("/posts", {state: 123});
и его закинул в кнопку, етперь при переходе по этой ссылке, будет прокидываться state со значением 123
обычно делают по другому. 

location поможет работать в приватными роутами
это может быть полезно при авторизации и регистрации
видео по авторизации в react: https://www.youtube.com/watch?v=ivtbRBEjLW8
нам важно как это работает с роутингом
создадим папку hoc, там будут компоненты высшего порядка с защитой, например роуты с авторизацией

это видео: https://www.youtube.com/watch?v=jv0ckzkKYzU&list=PLiZoB8JBsdznY1XwBcBhHL9L7S_shPGVE&index=5
ост 10:40
там далее приватные роуты, пригодится при авторизации
пока пошел делать просто отображение товаров в проекте







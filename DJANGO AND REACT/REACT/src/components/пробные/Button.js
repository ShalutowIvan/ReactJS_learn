import React, { useState, useEffect } from "react"
//импортировали { useState } , причем импорт нужно делать именно с пробелами возле скобок, иначе не сработает. Это мы импортировали функцию из react

//используем функцию, а не клас. Функцию лусше использовать, когда делаем что то маленькое, например выести какую то инфу
//теперь добавим хук в наш компонент. Все хуки начинаются со слова use, все хуки выполняются в автоматическом режиме. 

const Button = (props) => {
  const [click, setClick] = useState(0)//0 это значение параметра по умолчанию 
  // console.log(click)

  useEffect( () => {
    document.title = `Вы нажали ${click}`
  })
  // `` это типа F строк в питоне, можно юзать выражения внутри, но со значком $ перед фигурными скобками. Для каждой кнопки где юзается это состояние будет использоваться эффект


  return (
      <button onClick={() => setClick(click + 1)}>{props.text} {click}</button>
      )  
}

//переменная click содержит массив из двух значений (выглядеть будет с инексами нулевой элемент это значение по умолчанию), 0 это значение по умолчанию которое мы передали, и второй элемент с индексом 1 это функцию за счет которой мы можем менять значение состояния. 
//поэтому нужно создать 2 переменные, чтобы их можно было юзать, это значение по умолчанию, и функция. Обычно функцию называют setНазвание переменной. В нашем случае setClick
//сделаем обработчик событий в функции. Обработчик событий можно писать как onДействие. То есть буквы on и название действия с большой буквы. В обработчик событий мы прописали анонимную функцию, в которой мы значение по умолчанию увеличиваем на 1, и выводим его так: {click}, то есть {click} это будет прописано в назнвании кнопки. Например кнопка 1, кнопка 2
//сделаем еще хук useEffect. Срабатывае автоматом при изменении каких либо состояний. !!!!!!!!!!!!!!


//в компонент наш будем передавать параметр, и будем его выводить. props это параметр функции. Мы его выводим. Далее перейдем в шапку
//можно в параметр {props.text} передавать значение по умолчанию. Ниже мы это сделали. Теперь при вызове этой функции без передачи параметра будет передано значение по умолчнию 

// также в классах это юзается по другому, там другой метод, и обращаемся к внутреннему элементу класса через this.state.название переменной в состоянии:
// componentDidUpdate(prevProp){
//     if (this.state.helpText) !== "Help"
//       console.log("Some")
//   }
//при каждом изменинии текстого поля будет в консоль выводиться "Some"
// componentDidUpdate и useEffect срабатывают в момент изменения каких либо состояний



Button.defaultProps = {
  text: "Кнопка"
}


export default Button
видео курса:
https://www.youtube.com/watch?v=kz23xxukY5s&t=916s
нужно скачать nodeJS и установить
потом ставим реакт через vite. Он лучше чем вебпак. Работает лучше ставит быстрее и ошибок меньше
npm create vite@latest
эту команду нужно ввести в папке с проектом
далее vite будет подсказывать как установить и запустить проект

компоненты!!!!!!!!!!!!!!!!!!!!!!!!
Переиспользуемые
Разделение и изоляция логики
Проще разрабатывать интерфейс
HTML & CSS & JS лежат вместе
Используется везде

Структура проекта!!!!!!!!!!!!!!
оставил в папке src файлы:
main.jsx
index.css
App.jsx
data.js - этот файл руками создал

переделал main.jsx
убрал лишние импорты и оставил это:
const root = document.getElementById('root')
ReactDOM.createRoot(root).render(<App />)

html файл в который идет весь функционал идет в файл index.html он лежит в корне проекта, а не в папке public
getElementById ищет элемент в файле index.html
в самом html там кода мало. В основном весь контент идет из реакта
то есть в файле main.jsx мы берем приложение наше App.jsx и из него идет фунционал
сам javascript не понимает html теги и код html, но есть специальные сборщики vite или вебпак, они их преобразовывают, и отображают страницы
при эжелании можно поставить код форматтер preeter в VScode, он автомаом форатирует текст по отступам при сохранении
мы функцию App экспортируем и импортируем в другом файле.
потом вызываем ее в теге <App />
чтобы в реакте сделать компонент нужно создать функцию и написать и вернуть в ней шаблон, и экпортировать, потом импортировать и вызать в другом файле
названия компонентов всегда нужно писать с большой буквы

расширение jsx сделано для удобства, чтобы было понятно что в файле будет код jsx
компоненты можно выводить по несколько раз
когда мы в тегах пишем фигурные скобки, там можно писать любой JS код, и он будет интерпретироваться как шаблон
чтобы вывести что-то динамеческое, нужно написать что-то что можно привести к типу строка
импорт картинок просто через импорт как компонента только нужно прописать путь к файлу картинки

параметры в компонентах!!!!!!!!!!!!!!!!
название параметра может быть любым, но обычно пишут props как название параметра
сами значения компонентов нужно писать при вызове функции компонента. В самом компоненте их можно и не юзать, но в функцию они закидываются автоматически. И писать их можно сколько угодно скорее всего. Юзать все не обяз. Но лучше конечно делать все ровно, сколько написал компонентов столько и юзать.
есть оператор спред, выглядит как ...
он означает что мы берем последовательность. Лучше загуглить что она значит
циклы в jsx не работают, либо я не знаю как из делать
также можно вместо props писать названия самих компонентов
сделаем компонент Button.jsx
для отдельных компонентов лучше делать отдельный файл css в папке components
лучше также делать отдельные папки под компоненты. Так как в случае когда компонентов станет много, чтобы не было путаницы
можно еще вместо параметров или props писать в фигурных скобках слово children
тогда можно вызывать компонент как обычный тег html, и между открывающим и закрывающим тегом писать какую либо конструкцию html, тогда эта вся конструкция будет прокидываться в параметр
например так: <Button><h3>Круто</h3> <h1>коржик компот</h1> </Button>
Button это наша функция компонент
а обычно мы пишем так: <Button text="Кнопарь" />
слушатели событий начинаются с on
писать их нужно в компоненте, там где писали className
слушателей событий очень много
самый базовый это onClick
пишем так: onClick={}
в фигурных скобках передаем фукнцию, которая будет выполняться при клике на кнопку
саму функцию нужно прописать выше return
и функцию передаем в слушатель событий без вызова. Если передать с вызовом, то сработает 1 раз при запуске сайта и все, а при клике не будет работать
onMouseEnter={функция которая будет срабатывать}
это слушатель при наведении мышкой
также можно сразу в слушателе событий написать стрелочную функцию, а не писать функцию отдельно выше return. Так тоже можно.
onDoubleClick={() => console.log("двойной клик")}
функцию в функции создавать можно и это норм в JS так можно
желательно функцию которая будет срабатывать прописать в файле App.jsx
чтобы в разные кнопки прокидывался разный функционал
можно также передавать параметр функции как фунцию, то есть в этот параметр будет передаваться функция, название параметра можно писать любое

в css можно передавать параметры!!!!!!!!!!!
то есть прописали стили для кнопки, а потом дописали параметр название класса.названия параметра и в нем доп стили будут, которые можно применить при желании
также в JSX в параметре как функции можно передавать функцию с параметром как стрелочную функцию
и потом этот параметр как использовать. То есть создаем компонент, в него как параметр передаем функцию, и у этой функции есть параметр.

React State!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Теперь создадим переменную
let param = "asd"
и выведем ее внизу в параграфе
Потом в нашей функции с параметром переприсвоим значения в этой переменной, присвоим ей значение нашего параметра type
В консоли он выводится корректно. А в параграфе он не меняется, хотя мы присваиваем другое значение в эту переменную
в реакте обычные переменные не меняются, и для этого есть специальный функционал - состояния или State
если какая либо переменная будет состоянием или компоннет будет состоянием, то он на странице будет меняться при его изменении
можно еще протестить обновление страницы, написав в основной функции какой-то console.log, и понажимать кнопки. Наш console.log не будет повторно вызываться, так как страница не обновляется, а срабатывает только кнопка, которая у нас чтото выводит в консоль
как работать со State!!!!!!!!!!!!!!!!!!!!!
импортируем из реакт
import { useState } from 'react'
useState это функция, и она начинаются с префикса use, это означает что это хук с помощью которого мы можем создавать локальное состояние для компонента
можно создавать State как const или let, формат все равно один будет. Обычно пишут const. Состояние это всегда некий массив!!!!!!!!!!
State нельзя писать вне компонента. Всегда внутри функции компонента
состояния нужно создавать только на верхнем уровне по коду в функции, то есть в самом начале кода функции. Нельзя писать условие, типа если что-то то создаем State, так нельзя
если вывести в консоль наше состояние, то он выводится как массив.
пример состояние ниже, он так выглядит в консоли:
0: "Нажми на кнопку"
1: ƒ ()

В нем первый элемент это значение состояния, а второй элемент это функция позволяющая изменять этот State
то есть в состоянии есть 2 элемента как минимум, это значение состояния и функция которая может изменять состояние.
И эту функцию всегда прописывают с препиской set. Например, если состояние называется content, то функция для изменения состояния setContent. И в переменную content пишем значение состояния, а в переменную setContent функцию которая изменяет состояние
например так:
const stateArray = useState("Нажми на кнопку")//создали состояние
const content = stateArray[0]
const setContent = stateArray[1]
но так писать не удобно, и обычно так не пишут
чаще всего пишут так:
const [content, setContent] = useState("Нажми на кнопку")
тут как в питоне массиву переменных присваивается массив значений, и распределяется соответственно. Первому элементу значение, второй элементу функция, которая изменяет состояние
и мы не напрямую меняем переменную content, а используем функцию setContent, и в нее передаем параметр с нужным значением
И теперь при нажатии на кнопку меняется контент внизу. 
Также сделаем консоль логи на странице и в баттоне, и при загрузке страницы у нас эти логи выводятся, и также при изменении состояния они тоже выводятся.
Прописал в компоненте Button вывод с консоль, и в App компоненте, и при нажатии тоже консоль лог
При срабатывании изменения состояния все компоненты отрисовываются то есть рендерятся повторно. Странно
пока уберем логи в консоли
мы вызывали функцию вложенную в кнопках, и она возвращала просто строку, которая ей передавали как параметр
А теперь сделаем так, чтобы выводился коннент из объекта. Сделал словарь для примера. 
И в параграфе который у нас менялся постоянно пропишем это:
<p>{json_example[content]}</p>
json_example - это словарь как бы, а content это будет меняющийся ключ. То есть в переменную content мы меняем как состояние и изменяем ее значение. Значения у нас подставляются именно те, которые совпадают с ключами из json_example
по умолчанию content равен "Нажми на кнопку", и он не совпадает и с одним ключом. Поэтому так выводится. То есть можно как-то закидывать название клюей словаря, и отображать их
ВАЖНО!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
в функции когда мы изменяем переменную состояния (например изменили переменную content с помощью функции setContent), то она будет изменена, только при следующем рендере, и в коде с новым значеним сразу работать нельзя
то есть например у нас функция, которая изменяет значение, в ней мы пишем:
setContent(type)
console.log(content)
в консоль выведется все еще старое значение, точнее предыдущее значение. Если потом нажать на другую кнопку, то выведется значение предыдущей кнопки. 
Рендер сработает только при повторном нажатии на кнопку, либо нажатии на другую кнопку. Обновление страницы все сбросит
чтобы сделать время на странице можно прописать следующее:
const [time_now, setTime_now] = useState(new Date()) 
setInterval(() => setTime_now(new Date(), 1000))
и на страницу вывести наше состояние. Теперь будет тикать время каждую секунду. 
рендерится при этом только span, то есть тег где мы пишем состояние. Такое состояние кушет не очень много ресурса. 

далее у нас не выводится по умолчанию никакой объет, так как передается текст которого нет в словаре
условия с тернарным оператором:
{ contentType ? 
( <p>{json_example[contentType]}</p> ) :
( <p>Нажми на кнопку</p> )
}

тоже самое с null
{contentType ? 
<p>{json_example[contentType]}</p>:
null
}
{!contentType ? 
<p>Нажми на кнопку</p>:
null
}

обычное условие
{!contentType && <p>Нажми на кнопку</p> } тут если нет контента, то выводится текст Нажми на кнопку
{ contentType && <p>{json_example[contentType]}</p>} тут если есть контент то выводится элемент словаря

еще один вариант
сделаем отдельную переменную
let tabContent = null
и пропишем условие следующее
if (contentType){
tabContent = <p>{json_example[contentType]}</p>
}
else{
tabContent = <p>Нажми на кнопку</p>
}
jsx можно юзать вне return тоже

и все точно также работает. Также можно до return также делать различные конструкции

сделаем на кнопку активна или неактивна!!!!!!!!!!!!!!!!!!!!
для этого добавим параметр isActive в функцию Button 
и в className в теге button в функции Button пропишем это условие {isActive ? 'button active': 'button'}
и нужно параметр isActive определить при вызове компонента Button
isActive={contentType==="bla"}
напишем так. И при нажатии на кнопку у нас contentType меняется, и условие становится истинным

или
можно создать переменную
let classes = 'button'
if (isActive) classes += ' active'
и в случае если тру в isActive, то будет сложение строк

итерация массива в JSX!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
для перебора массива есть map, он преобразовывает его в другой массив
его можно прописать так: 
{massiv.map(el => <Example_method {...el} />)}
или так более понятно выглядит:
{massiv.map( (el) => {
    return <Example_method {...el} />
    }
)}

где, massiv это переменная нашего массива, el это переменная для итерации массива, Example_method это метод компонента, {...el} это как бы перебор элементов такой
также при переборе массива в возвращаемом компоненте нужно передатьва key, как бы ключ массива
если не передать то выйдет ошибка в консоли:
Each child in a list should have a unique "key" prop.
это нужно чтобы реакт корректно мог изменять массив, то есть ключ передавать надо. Обычно ключ это какое-либо уникальное значение массива, например ID. В нашем случае это будет title
пропишем так:
{massiv.map( (el) => {
    return <Example_method key={el.title} {...el} />
    }
)}

разделение на компоненты!!!!!!!!!!!!!!!!!!!!!!!!!!!
вынесем первую секцию в отдельный файл как компонент
вынес обе секции в отдельные компоненты файлыи и перенс туда же массивы и Json объекты
импорты тоже все поменял
и ипортировал вынесенные функции в файл App.jsx
ост 1:50










































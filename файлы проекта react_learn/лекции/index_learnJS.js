// курс дударя
// https://www.youtube.com/watch?v=h8psMIltC1Q&list=PLDyJYA6aTY1lpbNh66kFpF62QpJyzliT2&index=3
// или курс другой:
// https://www.youtube.com/watch?v=kz23xxukY5s&t=261s
// еще есть UbiTV:
// https://www.youtube.com/watch?v=GNrdg3PzpJQ&t=672s
// вроде тоже норм. Там он показывает приложение реакта. Как оно работает не понятно.
// еще один курс:
// https://www.youtube.com/watch?v=UvssjybWRvA&list=PLMlifxDLpB1CAtLxKmIE5FfGZkNx5K5XX&index=2
// надо смотреть, вроде норм



// чтобы подключить react нужно в теге head скопировать эти 2 ссылки:
{/* <script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
<script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script> */}
// их взяли со страницы документации:
// https://ru.legacy.reactjs.org/docs/cdn-links.html
// вставлять их нужно именно в теге head чтобы скрипты работали в теле body страницы
// также нужно скопировать скри babel со страницы
// https://babeljs.io/docs/babel-standalone
// нужно преобразовывать react js код в стандартный JSON, чтобы все обрабатывалось в браузере. Для этого нужна библиотека babel
// babel требует чтобы все файлы скриптов шли с типом babel
// <script type="text/babel">
// поэтому нужно прописать это в подключение библиотеки реакт в head
// теперь реакт подключен
// сделаем тег div для начала в html
// теперь начнем писать код JS
// ReactDOM.render()//обратились к объекту ReactDOM и вызвали через него метод render. За счет ReactDOM мы можем обращаться к нашей странице и выбирать из нее какие либо объекты. А за счет метода render мы будем говорить что именно будем помещать в определенный html тег
// ReactDOM.render()
// ReactDOM.render(<h1>Привет</h1>, document.getElementById("app"));//тут мы обратились к элементу по id app и туда запишем тег h1 с текстом
//чтобы увидеть что скрипт работает, нужно запустить наш файл с помощью live server. В VS code можно установить расширение, которое имитирует сервер. И можно запускать html с помощью сервера
// в функцию render можно передавать только 1 тег, то есть несколько тегов h1 нельзя передавать. Но передать тег div, и в него передать несколько тегов которые нам нужны. Так будет работать. 
// ReactDOM.render(<div> 
// <h1>Привет</h1>
// <h2>Мир</h2>
// </div>
// , document.getElementById("app"));

// мы написали html структуру, потому используем JSX. Это такой функционал для написания html кода в render
// расшифровывается как javascript xml
// без JSX код выглядит так:
// ReactDOM.render(React.createElement('input', {
// 	placeholder: "Help text", 
// 	value: "Текст"
// })  , document.getElementById("app"));
// или вариант с событиями на странице
// ReactDOM.render(React.createElement('input', {
// 	placeholder: "Help text", 
// 	onClick: () => console.log("Clicked"),
//     onMouseEnter: () => console.log("Mouse over"),
// })  , document.getElementById("app"));
// теперь сделаем похоже с jsx 
// ReactDOM.render(<input placeholder="Help text" /> , document.getElementById("app"));
// также можно html код записать в константы js
// const element = <input placeholder="Help text" /> 
// const app = document.getElementById("app")
// ReactDOM.render(element, app);//сюда просто подставляем константы

const inputClick = () => console.log("Clicked")
const mouseOver = () => console.log("Mouse Over")
const helpText = "Help text"
// const element = <input placeholder={helpText} onClick={inputClick} onMouseEnter={mouseOver} /> //можно прописывать анонимные функции. Но пропишем обычную. функции js в html коде пишем в фигурных скобках. Точнее стрелочные функции прописали. Выше указали функции, а теперь их записали в итоговый html код. И его передадим в рендер ниже
//также можно и обычный текст вставлять через переменную. То есть можно выводить переменную в любом месте кода html. Также можно прописать код в круглых скобках, тогда можно писать несколько тегов html, но их нужно оборачивать в тег div
const element = (<div>
<h1>{helpText}</h1>
<input placeholder={helpText} onClick={inputClick} onMouseEnter={mouseOver} />
<p>{ helpText == "Help text" ? "Yes": "No" }</p>
</div>)
//можно и тернарный оператор написать также
//для тега div если использовать класс, то нужно писать className, а не просто class. Так как class конфликтует со словом class
const app = document.getElementById("app")
ReactDOM.render(element, app);//сюда просто подставляем константы
// также можно прописывать разные условия циклы, переменные
//на данный момент мы подключили реакт с помощью ссылок в файле. Это не очень хороший поход. 
//Правильно подключить с помощью пакетного менеджера - npm. !!!!!!!!!!!!!!!!!!!!!!!!!!!!
// чтобы установить через npm нужно сначала поставить nodeJS. 
// Скачать nodeJS можно с сайта: https://nodejs.org/en/
// сайт с разными библиотеками для JS: https://www.npmjs.com/
// их можно ставить через npm
// чтобы установить библиотеку, нужно войти в терминал, затем в 

// уберем строки из html
// <!-- подключение react -->
// <script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
// <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
// <!-- подключение babel -->
// <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>

// это мы подключали библиотеку реакт
// нужно установить реакт через пакетный менеджер нпм. 
// команда для установки
// npm install react react-dom
//в файле package.json описываются различные зависимости, то есть библиотеки которые установлены в проекте
// такж тут может быть название проекта, характиристики и тд
// package-lock.json - в нем описываются системные операции, которые происходили в проекте
// в папке node_modules
// там находятся различные модули и библиотеки, которые есть в проекте, то есть папки с модулями

// также лучше ставить реакт по другому
// лучше ставить реакт через команду:
// npx create-react-app my-app
// она ставит реакт и создает сразу приложение
// в текущей команде my-app это название проекта, то есть папка в которой будет создан проект
// но можно написать просто . и тогда проект будет создан в текущей директории
// наверно лучше в отдельнгую папку ставить проект
// также будет папка node_modules, там все что нужно для нашего проекта. Типа venv в питоне
// также будет package.json, там прописаны все библиотеки для реакт проекта
// в папке public будут все файлы, которые будут показаны конечному пользаку
// в файле index.html не нужно подключить никакие библиотеки или js файлы, они подключаются автоматически
// пока убрали из папки public все файлы кроме index.html, и убрали из файла index.html все подключения иконок и тд
// в папке src будут все файлы с которыми мы будем взаимодействовать
// файлы js, css, файлы тестирования и тд
// пока все уберем кроме index.js
// теперь лайв сервер из vs code не нужен, так как в приложении реакт есть встроенны сервер. Его можно запускать
// Запуск сервера реакт!!!!!!!!!!!!!!!
// Команды для запуска и тд есть в файле package.json в словаре scripts 
// команда build строит проект для выгрузки на сервер. При изменениях проекта можно каждый раз не билдить. Сам проект автоматом перезапускается. Если что то не так, то будет ошибка. 
// команда test это для тестирования проекта
// команда start это для запуска проекта на нашем пк
// для команд пишем npm run и команда

// Уроки React JS с нуля / #4 – Компоненты и их возможности!!!!!!!!!!!!!!!!!!!!!!!
// за счет компонентов можно писать любой блок сайта
// блок это может быть кнопка, может быть форма регистрации и тд
// то есть часть сайта
// перепишем нашу структуру, чтобы все выводилось в формате компонентов
// чтобы создать компонент можно создать либо функцию либо клас
// можно сделать шапку отдебным компонентом. Можно и кнопки в шапке делать разными компонентами
// функции можно выводить в html коде так: <Название функции />
// можно также юзать стрелочные функции, и записывать их в констаны
// в будущем в основном будем юзать классы
// так как в классах можно описать больщше функционала и много функций

// в sj файлах теория по компонентам
// также каждый компонент лучше создавать в отдельном файле
// теперь у нас компоненты в разных файлах, и все выглядит более наглядно. В файле app мы собираем все компоненты, а в index.js мы выводим это пользователю

// как подключить файл со стилями!!!!!!!!!!!!!!!!!!!!
// в папке src создадим папку css. Там создадим файл main.css
// пропишем там стили, и далее нужно в index.js импортировать файл стилей main.css
// и стили сразу же добавляются на страницу после импорта - кажется очень удобно
// чтобы применился класс из css, нужно в компоненте указать className соответствующее классу в css
// <header className="header">

// подключение изображений!!!!!!!!!!!!!!!!!!!!
// для подключения изображений нужно также создать файл компонент
// там нужно прописать подключение компонента картинки: <img src={this.props.image}/>
// далее чтобы вставить картинку в App.js, нужно импортировать картинку по пути к ней
// import foto from "./img/foto.png"
// foto это как бы переменная через которую мы обращаемся к картинке
// обращаться по пути просто не работает<Image image="./img/foto.png"/> так не работает
// не обязательно конечно через компонент это делать, 
// можно и просто добавить такой тег: <img src={foto} />

// Уроки React JS с нуля / #5 – Использование состояний!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// добавим например в функцию inputClick новое действие, чтобы она изменяла переменную helpText
// И на странице у нас эта переменная выводится, но на странице она не изменится
// чтобы она менялась автоматом нужно работать с состояниями
// нужно создать конструктор - то есть функцию которая срабатывает автоматом при создании объекта на основе класса

// в классах можно писать и обычные функции, не обяз стрелочные, и слово function писать не нужно
// super(props) - это метод для вызова родительского класса, props - это для передачи возможных свойств в родительский класс
constructor(props) {
  super(props)
    this.state = {
      helpText: "Help text"
    }
    this.inputClick = this.inputClick.bind(this)
  }

// this.state - это что то типа props, но они меняют динамически состояния на странице. Им присваиваем переменные которые будут меняться динамически, идут в виде словаря то есть как бы json формат, ключ и значение
// this.inputClick = this.inputClick.bind(this) - означает что наша функция в классе может динамически изменять значение на странице
// переменную helpText, которую мы меняем динамически комментируем

// теперь запросим инфу у пользака и сразу выведем ее на экран
// все состояния записываем в один словарь в this.state конструктора
// добавим в наше input поле еще одну функцию
// onChange={event => this.setState({userData: event.target.value})}
// onChange - это стандартная функция из html, как onClick
// onClick срабатывает при клике мышкой
// onChange - срабатывает при изменении инпут поля, то есть когда пользак что=то вводит, у нас меняется состояние userData, и значения из события event записывается в состояние.
// и так как на странице выше мы это состояние выводим, то оно изменения сразу отобразится
  // причем когда мы будем писать что-то то сразу же и выводится

// метод render не нужно регистрировать как событие, так как он встроенный. Нужно регистрировать только наши методы, которые мы создаем


// Уроки React JS с нуля / #6 – Веб хуки. Что это и как работает?!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

// хуки это спец технология, которая позволяет перехватить функции в чужих процессах
// то есть можно выполнять действие в автоматическом формате, в зависимости от того, что было выполнено в другом процессе
// состояния работают примерно также, тоже меняют что другое если поменялось что то от них зависящее




